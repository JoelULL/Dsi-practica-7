{"/home/usuario/p7/Dsi-practica-7/src/solver.ts":{"path":"/home/usuario/p7/Dsi-practica-7/src/solver.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":65}},"2":{"start":{"line":15,"column":8},"end":{"line":15,"column":25}},"3":{"start":{"line":16,"column":8},"end":{"line":16,"column":33}},"4":{"start":{"line":24,"column":8},"end":{"line":24,"column":33}},"5":{"start":{"line":32,"column":8},"end":{"line":32,"column":41}},"6":{"start":{"line":35,"column":0},"end":{"line":35,"column":24}},"7":{"start":{"line":46,"column":20},"end":{"line":46,"column":32}},"8":{"start":{"line":47,"column":8},"end":{"line":55,"column":9}},"9":{"start":{"line":47,"column":21},"end":{"line":47,"column":22}},"10":{"start":{"line":48,"column":12},"end":{"line":54,"column":13}},"11":{"start":{"line":48,"column":25},"end":{"line":48,"column":26}},"12":{"start":{"line":49,"column":16},"end":{"line":53,"column":17}},"13":{"start":{"line":50,"column":31},"end":{"line":50,"column":39}},"14":{"start":{"line":51,"column":20},"end":{"line":51,"column":44}},"15":{"start":{"line":52,"column":20},"end":{"line":52,"column":40}},"16":{"start":{"line":56,"column":8},"end":{"line":56,"column":21}},"17":{"start":{"line":57,"column":8},"end":{"line":57,"column":26}},"18":{"start":{"line":58,"column":8},"end":{"line":58,"column":20}},"19":{"start":{"line":61,"column":0},"end":{"line":61,"column":32}},"20":{"start":{"line":72,"column":8},"end":{"line":72,"column":34}},"21":{"start":{"line":74,"column":29},"end":{"line":74,"column":56}},"22":{"start":{"line":75,"column":22},"end":{"line":75,"column":48}},"23":{"start":{"line":76,"column":23},"end":{"line":76,"column":46}},"24":{"start":{"line":77,"column":12},"end":{"line":80,"column":13}},"25":{"start":{"line":78,"column":16},"end":{"line":78,"column":34}},"26":{"start":{"line":79,"column":16},"end":{"line":79,"column":36}},"27":{"start":{"line":81,"column":12},"end":{"line":81,"column":38}},"28":{"start":{"line":84,"column":27},"end":{"line":84,"column":28}},"29":{"start":{"line":85,"column":28},"end":{"line":85,"column":29}},"30":{"start":{"line":86,"column":28},"end":{"line":86,"column":38}},"31":{"start":{"line":87,"column":29},"end":{"line":87,"column":40}},"32":{"start":{"line":88,"column":27},"end":{"line":88,"column":29}},"33":{"start":{"line":89,"column":12},"end":{"line":114,"column":13}},"34":{"start":{"line":90,"column":30},"end":{"line":90,"column":43}},"35":{"start":{"line":91,"column":31},"end":{"line":91,"column":46}},"36":{"start":{"line":92,"column":16},"end":{"line":113,"column":17}},"37":{"start":{"line":93,"column":20},"end":{"line":106,"column":21}},"38":{"start":{"line":94,"column":24},"end":{"line":94,"column":47}},"39":{"start":{"line":95,"column":24},"end":{"line":95,"column":35}},"40":{"start":{"line":98,"column":24},"end":{"line":105,"column":25}},"41":{"start":{"line":99,"column":28},"end":{"line":99,"column":51}},"42":{"start":{"line":100,"column":28},"end":{"line":100,"column":39}},"43":{"start":{"line":103,"column":28},"end":{"line":103,"column":52}},"44":{"start":{"line":104,"column":28},"end":{"line":104,"column":40}},"45":{"start":{"line":109,"column":20},"end":{"line":112,"column":21}},"46":{"start":{"line":110,"column":24},"end":{"line":110,"column":48}},"47":{"start":{"line":111,"column":24},"end":{"line":111,"column":36}},"48":{"start":{"line":115,"column":12},"end":{"line":115,"column":28}},"49":{"start":{"line":119,"column":0},"end":{"line":119,"column":30}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":14,"column":4},"end":{"line":14,"column":5}},"loc":{"start":{"line":14,"column":32},"end":{"line":17,"column":5}},"line":14},"1":{"name":"(anonymous_1)","decl":{"start":{"line":23,"column":4},"end":{"line":23,"column":5}},"loc":{"start":{"line":23,"column":26},"end":{"line":25,"column":5}},"line":23},"2":{"name":"(anonymous_2)","decl":{"start":{"line":31,"column":4},"end":{"line":31,"column":5}},"loc":{"start":{"line":31,"column":12},"end":{"line":33,"column":5}},"line":31},"3":{"name":"(anonymous_3)","decl":{"start":{"line":45,"column":4},"end":{"line":45,"column":5}},"loc":{"start":{"line":45,"column":18},"end":{"line":59,"column":5}},"line":45},"4":{"name":"(anonymous_4)","decl":{"start":{"line":71,"column":4},"end":{"line":71,"column":5}},"loc":{"start":{"line":71,"column":18},"end":{"line":117,"column":5}},"line":71},"5":{"name":"divide","decl":{"start":{"line":73,"column":17},"end":{"line":73,"column":23}},"loc":{"start":{"line":73,"column":31},"end":{"line":82,"column":9}},"line":73},"6":{"name":"combine","decl":{"start":{"line":83,"column":17},"end":{"line":83,"column":24}},"loc":{"start":{"line":83,"column":36},"end":{"line":116,"column":9}},"line":83}},"branchMap":{"0":{"loc":{"start":{"line":49,"column":16},"end":{"line":53,"column":17}},"type":"if","locations":[{"start":{"line":49,"column":16},"end":{"line":53,"column":17}},{"start":{"line":49,"column":16},"end":{"line":53,"column":17}}],"line":49},"1":{"loc":{"start":{"line":77,"column":12},"end":{"line":80,"column":13}},"type":"if","locations":[{"start":{"line":77,"column":12},"end":{"line":80,"column":13}},{"start":{"line":77,"column":12},"end":{"line":80,"column":13}}],"line":77},"2":{"loc":{"start":{"line":89,"column":19},"end":{"line":89,"column":65}},"type":"binary-expr","locations":[{"start":{"line":89,"column":19},"end":{"line":89,"column":39}},{"start":{"line":89,"column":43},"end":{"line":89,"column":65}}],"line":89},"3":{"loc":{"start":{"line":92,"column":16},"end":{"line":113,"column":17}},"type":"if","locations":[{"start":{"line":92,"column":16},"end":{"line":113,"column":17}},{"start":{"line":92,"column":16},"end":{"line":113,"column":17}}],"line":92},"4":{"loc":{"start":{"line":93,"column":20},"end":{"line":106,"column":21}},"type":"if","locations":[{"start":{"line":93,"column":20},"end":{"line":106,"column":21}},{"start":{"line":93,"column":20},"end":{"line":106,"column":21}}],"line":93},"5":{"loc":{"start":{"line":98,"column":24},"end":{"line":105,"column":25}},"type":"if","locations":[{"start":{"line":98,"column":24},"end":{"line":105,"column":25}},{"start":{"line":98,"column":24},"end":{"line":105,"column":25}}],"line":98},"6":{"loc":{"start":{"line":109,"column":20},"end":{"line":112,"column":21}},"type":"if","locations":[{"start":{"line":109,"column":20},"end":{"line":112,"column":21}},{"start":{"line":109,"column":20},"end":{"line":112,"column":21}}],"line":109}},"s":{"0":1,"1":1,"2":1,"3":1,"4":0,"5":1,"6":1,"7":1,"8":1,"9":1,"10":4,"11":4,"12":12,"13":3,"14":3,"15":3,"16":1,"17":1,"18":1,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":1},"f":{"0":1,"1":0,"2":1,"3":1,"4":0,"5":0,"6":0},"b":{"0":[3,9],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"inputSourceMap":{"version":3,"file":"/home/usuario/p7/Dsi-practica-7/src/solver.ts","sources":["/home/usuario/p7/Dsi-practica-7/src/solver.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Clase contexto donde identificar los algoritmos:\n * Mergesort y bubblesort\n */\nexport class Solver {\n    /**\n     * Constructor de la clase contexto que recibe como parametros:\n     * @param data array numerico a ordenar \n     * @param strategy la estrategia que en este caso es un algoritmo de ordenacion\n     */\n    constructor(private data: number[], private strategy: Strategy) {\n    }\n    /**\n     * Metodo que utiliza la clase contexto para cambiar de estrategia\n     * en este caso algoritmo de ordenacion\n     * @param strategy estrategia a cambiar (algoritmo)\n     */\n    setStrategy(strategy: Strategy) {\n      this.strategy = strategy;\n    }\n  \n    /**\n     * Metodo en el que la clase contexto permite a un objeto de la \n     * interfaz Strategy realizar su algoritmo sobre data.\n     * Donde data es el array numerico que le pasa el usuario\n     */\n    logic() {\n      this.strategy.execute(this.data);\n    }\n  }\n  /**\n   * Interfaz que permite crear una estrategia.\n   */\n  interface Strategy {\n    execute(data: number[]): void;\n  }\n  /**\n   * Primer algoritmo de ordenacion, BubbleSort.\n   * Este algoritmo revisa cada elemento de la lista con\n   * el que tiene a continuacion, si el que esta delante es mas\n   * pequeño los intercambia. En cada iteracion del algoritmo\n   * un elemento no sera evaluado porque no habran elementos a su derecha\n   * mas grandes al estar ya ordenados con respecto a este numero\n   */\n  export class BubbleSort implements Strategy {\n    execute(data: number[])  {\n      let array : number[] = data.slice();\n\n    for(let i = 0; i < array.length; i++) {\n        for(let j = 0; j < array.length - 1; j++) {\n\n            if(array[j] > array[j + 1]) {\n                let swap = array[j];\n                array[j] = array[j + 1];\n                array[j + 1] = swap;\n            }\n        }\n    }\n    data = array;\n    console.log(data);\n    return data;\n    }\n  }\n  /**\n   * Segundo algoritmo de ordenacion, MergeSort. \n   * Este algoritmo lo primero que hara es comprobar \n   * que si la longitud del array es menor o igual que 1\n   * Si esto es asi, significara que el array ya esta ordenado. El array\n   * a ordenar se divide en dos mitades y cada es ordenada. Cada mitad ordenada\n   * es combinada de forma ordenada obteniendo el array ordenado.\n   */\n  export class MergeSort implements Strategy {\n    execute(data: number[]) {\n        console.log(divide(data));\n        function divide(items: number[]): number[] {\n            let halfLength : number = Math.ceil(items.length / 2);\n            let low : number[] = items.slice(0, halfLength);\n            let high : number[] = items.slice(halfLength);\n            if (halfLength > 1) {\n                low = divide(low);\n                high = divide(high);\n            }\n            return combine(low, high);\n        }\n        function combine(low: number[], high: number[]): number[] {\n            let indexLow : number = 0;\n            let indexHigh : number = 0;\n            let lengthLow : number = low.length;\n            let lengthHigh : number = high.length;\n            let combined : number[] = [];\n            while (indexLow < lengthLow || indexHigh < lengthHigh) {\n                let lowItem : number = low[indexLow];\n                let highItem : number = high[indexHigh];\n                if (lowItem !== undefined) {\n                    if (highItem === undefined) {\n                        combined.push(lowItem);\n                        indexLow++;\n                    } else {\n                        if (lowItem <= highItem) {\n                            combined.push(lowItem);\n                            indexLow++;\n                        } else {\n                            combined.push(highItem);\n                            indexHigh++;\n                        }\n                    }\n                } else {\n                    if (highItem !== undefined) {\n                        combined.push(highItem);\n                        indexHigh++;\n                    }\n                }\n            }\n            return combined;\n        }\n    }\n  }"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"6948080f4581c18ba08d264ca4cc57f86c207d3d","contentHash":"0c4acd91f704532d91252e349a2edb18422e44e51778b597417a4a9cef656f03"}}